import React, { useState, useEffect } from 'react';
import { MdFavorite } from 'react-icons/md';
import api from '../../../services/api';

import { Container, Paragraph, ListImage, ContainerRepository, Dedication } from './styles';
import img1 from './assets/img1.png';
import img2 from './assets/img2.png';
import img3 from './assets/img3.png';
import img4 from './assets/img4.png';
import img5 from './assets/img5.png';
import img6 from './assets/img6.png';
import img7 from './assets/img7.png';
import img8 from './assets/img8.png';
import img9 from './assets/img9.png';
import img10 from './assets/img10.png';
import img11 from './assets/img11.png';
import img12 from './assets/img12.png';
import img13 from './assets/img13.png';
import img14 from './assets/img14.png';
import img15 from './assets/img15.png';
import img16 from './assets/img16.png';

export default function Cli() {

    const [conteudo, setConteudo] = useState({});
    const [repo, setRepo] = useState({});

    useEffect(() => {
        async function getRepo() {

            const responseRepo  = await api.get('https://api.github.com/repos/edmarjunior/calculadora-cli');

            const responseIp = await api.get('https://api.ipify.org/?format=json');

            console.log(responseIp);

            api.defaults.headers.common['Ip'] = responseIp.data.ip;

            const responseConteudo = await api.get('/conteudos/1');

            const { name, html_url, description } = responseRepo.data;
            const { avatar_url } = responseRepo.data.owner;

            setConteudo(responseConteudo.data);

            setRepo(
            {
                name, 
                html_url, 
                description,
                avatar_url
            });
        }
        
        getRepo();

    }, []);


    return (
        <Container>
            <header>
                <h1>{conteudo.titulo}</h1>
                <span>Postado em 24/05/2020</span>
            </header>
            <div>
                <p>
                    Neste post irei abordar como criar uma CLI (interface de linha de comando) em node.js, o conte√∫do ser√° para iniciante no assunto, nossa aplica√ß√£o ser√° bem simples, 
                    por√©m servir√° de base para entendermos alguns conceitos. Em futuros post's, pretendo criar uma outra CLI com uma utilidade mais aplic√°vel na concep√ß√£o de novos projetos.
                </p>
            </div>
            <div>
                <h2>Breve explica√ß√£o sobre CLI</h2>
                <Paragraph>
                    CLI nada mais √© do que uma aplica√ß√£o (como outra qualquer) com a diferen√ßa em que ela √© constru√≠da para rodar dentro de um terminal de linha de comando, ou seja, 
                    sem interface gr√°fica. Podemos pegar o exemplo da calculadora do Windows, que √© uma aplica√ß√£o feita para desktops, e nesse post vamos fazer uma para rodar somente 
                    atrav√©s de linha de comando, a inten√ß√£o √© abrir o terminal e digitar ‚Äúcalculadora soma 1 3‚Äù e obter o resultado 4.
                </Paragraph>
            </div>
            <div>
                <h2>Iniciando a cria√ß√£o da CLI de calculadora</h2>
                <Paragraph>
                    Primeiramente vamos criar a estrutura da nossa CLI, crie uma pasta (com nome e local que desejar) e rode o comando ‚Äúnpm init -y‚Äù para criar o arquivo package.json.
                </Paragraph>
                <img src={img1} alt="cria√ß√£o do arquivo package.json" />

                <Paragraph>
                    Observe que o comando ‚Äúnpm init -y‚Äù √© uma CLI que cria pra gente o arquivo package.json automaticamente, agilizando nossa vida! Caso essa CLI n√£o tivesse 
                    sido utilizada, ter√≠amos que criar esse arquivo e todo seu conte√∫do manualmente.
                </Paragraph>
                <Paragraph>
                    Abra a pasta criada com seu editor de c√≥digo preferido, como vou utilizar o VS Code, √© s√≥ executar no terminal o comando ‚Äúcode .‚Äù 
                    (observe que esse comando tamb√©m √© uma CLI, sua fun√ß√£o √© abrir o VS Code para a gente, e como passamos o par√¢metro ‚Äú.‚Äù (ponto), estamos instruindo a 
                    CLI para abrir o VS dentro do diret√≥rio atual que est√° sendo executado üòâ)
                </Paragraph>
                <ListImage>
                    <img src={img2} alt="comando para abertura do VS code" />
                    <img src={img3} alt="vs code aberto" />
                </ListImage>
            </div>
            <div>
                <h2>Pausa para reflex√£o</h2>
                <Paragraph>
                    At√© aqui, podemos observar a import√¢ncia das CLI‚Äôs referente a agilidade na execu√ß√£o de tarefas, elas s√£o poderosas aplica√ß√µes e podem ser desenvolvidas 
                    para diversas utilidades, seja para criar arquivos de configura√ß√£o ‚Äúnpm init -y‚Äù, para executar aplica√ß√µes ‚Äúcode .‚Äù, executar nossa calculadora que estamos 
                    criando ‚Äúcalc soma 1 3‚Äù, enfim existe uma infinidade de aplicabilidade.
                </Paragraph>
            </div>
            <div>
                <h2>Continuando nossa CLI</h2>
                <Paragraph>
                    Vamos criar um arquivo ‚Äúcalc.js‚Äù, √† princ√≠pio ter√° somente com a fun√ß√£o ‚Äúsoma‚Äù, para testarmos podemos executar o arquivo com o comando ‚Äúnode calc.js‚Äù, 
                    e veremos o resultado 7, com isso a fun√ß√£o principal e √∫nica da nossa calculadora est√° pronta.
                </Paragraph>
                <img src={img4} alt="executando o arquivo calc.js" />
                <Paragraph>
                    O pr√≥ximo passo √© alteramos a chamada e configura√ß√µes da nossa aplica√ß√£o, na imagem acima estamos executando o arquivo calc.js com o comando ‚Äúnode calc.js‚Äù, 
                    entretanto, como eu disse l√° no inicio do post, a inten√ß√£o √© digitar o comando ‚Äúcalculadora soma 1 3‚Äù, onde ‚Äúcalculadora‚Äù ser√° o nome da nossa CLI, ‚Äúsoma‚Äù 
                    ser√° a action (a√ß√£o) que ser√° disparada e ‚Äú1‚Äù e ‚Äú3‚Äù ser√° os par√¢metros enviados para a a√ß√£o.
                </Paragraph>
            </div>
            <div>
                <h2>Alterando o package.json</h2>
                <Paragraph>
                    Vamos incluir os dois comandos abaixo no nosso arquivo package.json, o primeiro comando √© para instruir a instala√ß√£o da nossa aplica√ß√£o de forma global, 
                    e o segundo √© para direcionar o comando ‚Äúcalculadora‚Äù (que ser√° executado no terminal) para nosso arquivo ‚Äúcalc.js‚Äù.
                </Paragraph>
                <img src={img5} alt="alterando o arquivo package.json" />
                <Paragraph>
                    O pr√≥ximo passo √© alterar nosso arquivo ‚Äúcalc.js‚Äù para instrui-lo a ser executado com o node, para isso √© s√≥ inserir na linha 1 o comando destacado abaixo.
                </Paragraph>
                <img src={img6} alt="alterando o arquivo package.json" />
                <Paragraph>
                    Nesse ponto, se j√° tentarmos rodar nossa CLI ainda n√£o dar√° certo, pois ainda n√£o a instalamos na nossa m√°quina, aparecer√° uma mensagem parecida com a abaixo:
                </Paragraph>
                <img src={img7} alt="comando n√£o encontrado" />
                <Paragraph>
                    Para instalar nossa CLI, vamos utilizar o comando ‚Äúnpm link‚Äù, com isso nossa aplica√ß√£o estar√° instalada globalmente na nossa m√°quina.
                </Paragraph>
                <img src={img8} alt="comando npm link" />
                <Paragraph>
                Agora sim, digitando o comando ‚Äúcalculadora‚Äù (definido no package.json) nossa CLI j√° ser√° executada exibindo o valor 7 (resultado do c√°lculo da soma) üòä.
                </Paragraph>
                <img src={img9} alt="comando calculadora" />
            </div> <div>
                <h2>Passando par√¢metros</h2>
                <Paragraph>
                    Se executarmos nosso comando ‚Äúcalculadora‚Äù passando os argumentos 5 6, exemplo: ‚Äúcalculadora 5 6‚Äù podemos recuperar esse argumentos dentro do 
                    nosso arquivo ‚Äúcalc.js‚Äù com o ‚Äúprocess.argv‚Äù, vamos alterar nosso arquivo (incluindo a linha 11 da imagem abaixo) para exibir o conte√∫do dessa vari√°vel 
                    que √© uma matriz.
                </Paragraph>
                <img src={img10} alt="exibindo o conteudo da matriz de argumentos" />
                <Paragraph>
                    Ap√≥s inclu√≠do a linha acima, execute novamente a CLI passando os dois argumentos ‚Äú5‚Äù e ‚Äú6‚Äù (conforme imagem abaixo) para vermos o conte√∫do na matriz:
                </Paragraph>
                <img src={img11} alt="conte√∫do da matriz de argumentos" />
                <Paragraph>
                    Observe que a matriz possui 4 itens, onde os dois primeiros se referem a forma de como o script foi executado e o caminho do arquivo que foi executado, 
                    e os outros dois s√£o os argumentos que passamos via terminal com o comando ‚Äúcalculadora 5 6‚Äù. Pronto agora j√° aprendemos como capturar os argumentos enviados üòâ
                </Paragraph>
                <Paragraph>
                    Agora que j√° sabemos como capturar os argumentos, vamos alterar nosso arquivo ‚Äúcalc.js‚Äù para capturar os argumentos e passa-los para fun√ß√£o que 
                    realiza a soma, conforme imagem abaixo:
                </Paragraph>
                <img src={img12} alt="recuperando os argumentos e passando para a fun√ß√£o" />
                <Paragraph>
                    Observe que tive que utilizar o operador ‚Äú+‚Äù (nas linhas 9 e 10) para converter os argumentos para n√∫meros, pois como vimos, a matriz ‚Äúargv‚Äù armazena 
                    somente string, se voc√™ n√£o converter os argumentos, o resultado da soma abaixo seria ‚Äú56‚Äù (pois a fun√ß√£o soma iria fazer uma concatena√ß√£o ao em vez 
                    de 11 que seria a soma) üòä
                </Paragraph>
                <img src={img13} alt="comando calculadora passando os argumentos 5 6" />
                <Paragraph>
                    Com isso nossa CLI est√° quase pronta. Lembra que nossa inten√ß√£o √© digitar o comando ‚Äúcalculadora soma 1 3‚Äù, ent√£o, est√° faltando o ‚Äúsoma‚Äù, que √© a nossa a√ß√£o, 
                    n√£o d√° pra chamar apenas ‚Äúcalculadora 1 3‚Äù, pois o usu√°rio que utilizar essa CLI n√£o saber√° que ser√° realizado uma soma, e tamb√©m se quis√©ssemos implementar 
                    outras a√ß√µes como subtra√ß√£o, multiplica√ß√£o, divis√£o, etc. seria necess√°rio incluir no comando qual a√ß√£o o usu√°rio deseja, para isso vamos utilizar o Commander.
                </Paragraph>
            </div> 
            <div>
                <h2>Implementando o Commander</h2>
                <Paragraph>
                    O comander basicamente √© um pacote dispon√≠vel para baixar no npm, com ele nos conseguiremos enviar nossa a√ß√£o de soma e escuta-la dentro do nosso 
                    arquivo ‚Äúcalc.js‚Äù, ent√£o vamos l√°.
                </Paragraph>
                <Paragraph>
                    Primeiramente vamos instalar o pacote do commander usando o npm
                </Paragraph>
                <img src={img14} alt="instala√ß√£o do commander" />
                <Paragraph>
                    Agora vamos alterar nosso arquivo ‚Äúcalc.js‚Äù para ficar igual a imagem abaixo:
                </Paragraph>
                <img src={img15} alt="estrutura para o commander" />
                <ul>
                    <li>
                        <strong>Linha 3:</strong>  estamos importando o ‚Äòcommander‚Äô que acabamos de instalar
                    </li>
                    <li>
                        <strong>Linha 6:</strong> estamos definindo um comando para escutar nossa a√ß√£o, observe que na string passada como argumento estamos dizendo qual √© o comando 
                        e os argumentos ‚Äúx‚Äù e ‚Äúy‚Äù que s√£o obrigat√≥rios por estarem envolvidos por ‚Äú&lt;&gt;‚Äù, caso eles fossem opcionais deveriam estar envolvidos por ‚Äú[]‚Äù
                    </li>
                    <li>
                        <strong>Linha 7:</strong> estamos definindo uma a√ß√£o a ser tomada quando o usu√°rio executar o comando da linha 6, a a√ß√£o √© justamente nossa fun√ß√£o ‚Äúsoma‚Äù que 
                        foi transferida para dentro da ‚Äúaction‚Äù.
                    </li>
                    <li>
                        <strong>Linha 8:</strong> tivemos que alterar a fun√ß√£o para converter as vari√°veis ‚Äúx‚Äù e ‚Äúy‚Äù (colocando o operador ‚Äú+‚Äù antes de cada uma)
                    </li>
                    <li>
                        <strong>Linha 12:</strong> essa linha √© necess√°ria para que o ‚Äúcommander‚Äù consiga ler os argumentos que o usu√°rio que enviar.
                    </li>
                </ul>
                <Paragraph>
                    Agora se voc√™ executar o comando ‚Äúcalculadora soma 1 3‚Äù ter√° o resultado ‚Äú4‚Äù, assim como esper√°vamos.
                </Paragraph>
                <img src={img16} alt="comando calculadora soma 1 3" />
                <Paragraph>
                    Com isso chegamos ao fim da cria√ß√£o da nossa CLI. üëèüëèüëè
                </Paragraph>
            </div> 
            <div>
                <h2>Publicando no NPM</h2>
                <Paragraph>
                    Para que outras pessoas possa utilizar nossa CLI vamos publicada no NPM, primeiramente temos que alterar o nome da nossa CLI 
                    (localizado na propriedade ‚Äúname‚Äù do arquivo ‚Äúpackage.json‚Äù) para um nome dispon√≠vel no npm, para isso podemos procurar em 
                    https://www.npmjs.com/package/nome_da_sua_cli, se ainda n√£o existir nenhum pacote com esse nome, ent√£o podemos seguir com ele.
                </Paragraph>
                <Paragraph>
                    Com o nome definido, agora √© s√≥ seguir os passos abaixo:
                </Paragraph>
                <ul>
                    <li>
                        Criar uma conta no <a href="https://www.npmjs.com/">NPM</a>
                    </li>
                    <li>
                        Executar no terminal o comando <code>npm login</code> e fazer o login com o usu√°rio e senha criado
                    </li>
                    <li>
                        Executar no terminal (dentro da pasta da nossa CLI) o comando <code>npm publish</code>
                    </li>
                </ul>
                <Paragraph>
                    Pronto nossa CLI agora est√° dispon√≠vel para qualquer pessoa que queira utilizar, para testarmos podemos voltar ao site do npm e 
                    verificar que nosso pacote j√° estar√° vis√≠vel juntamente com o comando para instala-lo.
                </Paragraph>
            </div>
            <div>
                <h2>Finalizando</h2>
                <Paragraph>
                    Com isso finalizamos esse post, espero ter ajudado com algum conhecimento.
                </Paragraph>
                <Paragraph>
                    O conte√∫do da nossa aplica√ß√£o est√° disponivel no reposit√≥rio abaixo
                </Paragraph>
                <ContainerRepository>
                    <img src={repo.avatar_url} alt="avatar do propriet√°rio do reposit√≥rio"/>
                    <a href={repo.html_url} target="_blank">{repo.name}</a>
                    <span>{repo.description}</span>
                </ContainerRepository>
                <Paragraph>
                    At√© a pr√≥xima, valeu galera!
                </Paragraph>
                
            </div>
            <Dedication>
                <span>Dedico este post √† <strong>T√°bata Costa</strong></span> 
                <MdFavorite color="#ff0000" size={20} />
                <span>minha esposa e revisora deste conte√∫do, obrigado por tudo! üòä</span>
            </Dedication>
        </Container>
    );
}
